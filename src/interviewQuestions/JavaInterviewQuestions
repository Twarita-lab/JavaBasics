#What is Runtime Polymorphism?
		Runtime polymorphism or dynamic method dispatch is a process in which a call to an overridden method is resolved at runtime rather than at compile-time.
		In this process, an overridden method is called through the reference variable of a super class. 

#What is abstract class?
		A class that is declared as abstract is known as abstract class. It needs to be extended and its method implemented. It cannot be instantiated.

#Can there be any abstract method without abstract class?
		Yes because, the methods in an interface are abstract.
		But if there is any abstract method in a class, that class must be abstract.

#Can you use abstract and final both with a method?
		No, because abstract method needs to be overridden whereas you can't override final method.

#Is it possible to instantiate the abstract class?
		No, abstract class can never be instantiated.

#What is interface?
		Interface is a blueprint of a class that have static constants and abstract methods.
		It can be used to achieve fully abstraction and multiple inheritance.

#Can you declare an interface method static?
		Since Java8 you can have static methods in an interface (with body). 
		You need to call them using the name of the interface, just like static methods of a class.
		
#Can an Interface be final?
		No, because its implementation is provided by another class.

#What is marker interface?
		An interface that have no data member and method is known as a marker interface.For example Serializable, Cloneable etc.
		It is an empty interface (no field or methods). 
		
#What is difference between abstract class and interface?
		An abstract class can have method body (non-abstract methods).
		Interface have only abstract methods.
		
		An abstract class can have instance variables.
		An interface cannot have instance variables.
		
		An abstract class can have constructor.
		Interface cannot have constructor.
		
		You can extends one abstract class.
		You can implement multiple interfaces.
		
		An Abstract class can not have Private Methods & Variables, though can have Public, Default and Protected Methods & Variables.
		An Interface can have only Public Methods & Variables.
		
#Can we define private and protected modifiers for variables in interfaces?
		No, they are implicitly public.

#When can an object reference be cast to an interface reference?
		An object reference can be cast to an interface reference when the object implements the referenced interface.